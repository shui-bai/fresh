<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<context:component-scan base-package="com.fresh">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- spring的配置文件，主要配置 -->
	<context:property-placeholder location="classpath:db.properties" />
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${oracle.driver}"></property>
		<property name="jdbcUrl" value="${oracle.url}"></property>
		<property name="user" value="${oracle.username}"></property>
		<property name="password" value="${oracle.password}"></property>
	</bean>

	<!-- 配置mybatis的整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置mybatis配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 配置mapper文件的位置 --> 
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.fresh.dao"></property>
	</bean>
 
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制住数据源  -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	<!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  -->
	<!-- <aop:config>
		切入点表达式
		<aop:pointcut expression="execution(* com.jq.service.impl.BookService.*(..))" id="txPoint"/>
		配置事务增强
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	配置事务增强，事务如何切入 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="pay*" isolation="READ_COMMITTED"
				propagation="REQUIRED"
				rollback-for="com.jq.util.StoreHouseLessException,com.jq.util.MoneyLessException"></tx:method>
		</tx:attributes>
	</tx:advice> -->
	
	<!-- 
		统一异常处理：
		1.在jsp阶段，web.xml中，提供了error-page的写法，当发生指定异常的时候，指定跳转页面:
		2.在spring中，也提供了一些异常处理的方式：
			a. 通过@ExceptionHandler注解，来指定异常发生时需要完成的操作;
				这种方式，只局限于注解所在的类中生效；	
				为了能在所有控制器类中应用，可以写一个父类，添加@ExceptionHandler注解,然后让所有控制器类继承该父类;
			b.	借助于spring提供的SimpleMappingExceptionResolver异常处理类，完成异常配置
			c. 也可以自己来创建自己的异常处理类，实现HandlerExceptionResolver接口
	
	 -->
	
	<!-- <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		发生异常时，默认跳转的页面
		<property  name="defaultErrorView" value="error_simple" ></property>
		异常发生时，保存错误信息的对象的名字,默认叫做exception
		<property name="exceptionAttribute" value="ex" ></property>
		<property name="exceptionMappings" >
			<props>
				<prop key="cn.sz.gl.util.MoneyLessException" >error_simple</prop>
				
			</props>
		</property>
	</bean> -->
	<!-- <bean class="com.jq.controller.MyExceptionHander"></bean> -->
</beans>
